name: 2048 Game Bot

on:
  issues:
    types: [opened]

jobs:
  play_game:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies from requirements.txt
        run: pip install -r requirements.txt

      - name: Parse Issue Title and Set Environment Variables
        id: parse_issue
        run: |
          # Get the issue title
          ISSUE_TITLE="${{ github.event.issue.title }}"
          echo "Issue title: $ISSUE_TITLE"

          # Use regex to extract the move direction (case-insensitive u/d/l/r)
          # The regex captures 'U', 'D', 'L', 'R'
          if [[ "$ISSUE_TITLE" =~ ^MOVE:[[:space:]]*([UDLRudlr])$ ]]; then
            DIRECTION_INPUT="${BASH_REMATCH[1]}"
            echo "Extracted direction input: $DIRECTION_INPUT"

            # Set outputs for next steps
            echo "move_direction=$DIRECTION_INPUT" >> "$GITHUB_OUTPUT"
            echo "is_valid_move=true" >> "$GITHUB_OUTPUT"
          else
            echo "Issue title does not match 'MOVE: [DIRECTION]' format."
            echo "is_valid_move=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Get Username
        id: get_username
        run: echo "username=${{ github.event.issue.user.login }}" >> "$GITHUB_OUTPUT"

      - name: Run 2048 Game Script
        # Only run if a valid move direction was found
        if: steps.parse_issue.outputs.is_valid_move == 'true'
        run: |
          python3 main.py "${{ steps.get_username.outputs.username }}" "${{ steps.parse_issue.outputs.move_direction }}"
        env:
          PYTHONPATH: . # Ensure Python can find modules in the 'game' directory

      - name: Run README Update Script
        # Always run, even if the game didn't move, to keep tables fresh
        run: python3 update_readme.py

      - name: Commit Game State and README Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Bot: ${{ steps.get_username.outputs.username }} moved ${{ steps.parse_issue.outputs.move_direction || ' (invalid/reset)' }}"
          branch: main
          file_pattern: |
            data/*
            board/*
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment and Close Issue (Valid Move)
        if: steps.parse_issue.outputs.is_valid_move == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              content: '+1'
            });
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'Your move has been processed! Check the updated board and leaderboards in the [main README](${{ github.repositoryUrl }}).'
            });
            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });

      - name: Comment on Invalid Issue
        if: steps.parse_issue.outputs.is_valid_move == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'Woops, that's an invalid issue title format. Please use "MOVE: [U/D/L/R]".'
              state: 'closed'
            });